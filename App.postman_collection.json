{
	"info": {
		"_postman_id": "549d86c3-ca70-4d28-bfc3-41450bb488b4",
		"name": "App",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30192271"
	},
	"item": [
		{
			"name": "Categoria",
			"item": [
				{
					"name": "Categoria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Response is an array with at least one element\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array').that.is.not.empty;",
									"});",
									"",
									"",
									"pm.test(\"Icon is a valid URL format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(category) {",
									"        pm.expect(category.icon).to.match(/^https?:\\/\\/\\w+(\\.\\w+)+(:\\d+)?\\/?$/);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Color is a valid hex color code\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    responseData.forEach(function(category) {",
									"        pm.expect(category.color).to.match(/^#[0-9A-F]{6}$/i, \"Color is not a valid hex color code\");",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"name\": \"hair dresser 2\",\r\n    \"image\": \"some_url\",\r\n    \"countInStock\": 500\r\n    \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/categories/651c5fb754f394362c6551c7",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"categories",
								"651c5fb754f394362c6551c7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categoria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"  pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"",
									"pm.test(\"Name is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Icon is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.icon).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Icon should not be empty\");",
									"});",
									"",
									"",
									"pm.test(\"Color is a valid hexadecimal color code\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.color).to.exist.and.to.match(/^#[0-9A-Fa-f]{6}$/);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"pastel\",\r\n   \"icon\": \"icon-pastel\",\r\n   \"color\": \"#554455\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/categories/651c5fb754f394362c6551c7",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"categories",
								"651c5fb754f394362c6551c7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categoria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Name field is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    ",
									"    responseData.forEach(function (category) {",
									"        pm.expect(category.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Icon is a non-empty string\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('array');",
									"    responseData.forEach(function (category) {",
									"        pm.expect(category.icon).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1);",
									"    });",
									"});",
									"",
									"",
									"pm.test(\"Color is a non-empty string\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  responseData.forEach(function (category) {",
									"    pm.expect(category.color).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Color should not be empty\");",
									"  });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"peixe\",\r\n  \"icon\": \"peixe-icon\",\r\n  \"color\": \"#55555\"\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/categories",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"categories"
							]
						}
					},
					"response": []
				},
				{
					"name": "Categoria",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 404\", function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"",
									"pm.test(\"Response has the 'success' field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.have.property('success');",
									"});",
									"",
									"",
									"pm.test(\"The success field should be true\", function () {",
									"  const responseData = pm.response.json();",
									"",
									"  pm.expect(responseData).to.be.an('object');",
									"  pm.expect(responseData.success).to.be.true;",
									"});",
									"",
									"",
									"pm.test(\"Response has the 'message' field\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.message).to.exist;",
									"});",
									"",
									"",
									"pm.test(\"The 'message' field should not be empty\", function () {",
									"  const responseData = pm.response.json();",
									"  ",
									"  pm.expect(responseData.message).to.exist.and.to.not.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"computadores11\",\r\n   \"icon\": \"icon-computer\",\r\n   \"color\": \"#050505\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/categories/651b40a56e991a270a9218c0",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"categories",
								"651b40a56e991a270a9218c0"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User",
			"item": [
				{
					"name": "User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"",
									"pm.test(\"User field is empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.user).to.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Token field is empty\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.token).to.be.empty;",
									"});",
									"",
									"",
									"pm.test(\"Response time is less than 500ms\", function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(500);",
									"});",
									"",
									"",
									"pm.test(\"Verify that the response body contains an error message\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.error).to.exist.and.to.be.a('string');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"Jhon@email.com\",\r\n    \"password\": \"123456\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/users/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Email is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
									"});",
									"",
									"",
									"pm.test(\"Phone is in a valid format\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.phone).to.match(/^\\d{3}-\\d{3}-\\d{4}$/);",
									"});",
									"",
									"",
									"pm.test(\"Verify that isAdmin field is a boolean value\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData.isAdmin).to.be.a('boolean');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "   {\r\n        \"isAdmin\": false,\r\n        \"street\": \"AV. Brasil\",\r\n        \"apartment\": \"4555\",\r\n        \"zip\": \"1811\",\r\n        \"city\": \"Montauri\",\r\n        \"country\": \"Brasil\",\r\n        \"name\": \"Jhon\",\r\n        \"email\": \"Jhon@email.com\",\r\n        \"password\": \"456789\",\r\n        \"phone\": \"54564645686\"\r\n\r\n    }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/users/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Produto",
			"item": [
				{
					"name": "produto",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Price is a non-negative number\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.price).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.price).to.be.at.least(0, \"Price should be a non-negative number\");",
									"});",
									"",
									"",
									"pm.test(\"Rating should be a number between 0 and 5\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.rating).to.be.a('number');",
									"    pm.expect(responseData.rating).to.be.within(0, 5);",
									"});",
									"",
									"",
									"pm.test(\"CountInStock is a non-negative integer\", function () {",
									"    const responseData = pm.response.json();",
									"    ",
									"    pm.expect(responseData).to.be.an('object');",
									"    pm.expect(responseData.countInStock).to.exist.and.to.be.a('number');",
									"    pm.expect(responseData.countInStock).to.be.at.least(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"product 1\",\r\n    \"description\": \"product 1 description\",\r\n    \"richdescription\": \"product 1 richdescription\",\r\n    \"image\": \"product1/image.jpg\",\r\n    \"brand\" : \"product 1 brand\",\r\n    \"price\": 25,\r\n    \"category\": \"651b639a42938720e0889a89\",\r\n    \"countInStock\": 10,\r\n    \"rating\": 4,\r\n    \"numReviews\": 22,\r\n    \"isFeatured\": true\r\n}\r\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/products",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"products"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}